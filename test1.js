let a = 1;
//node test1.js 실행 명령어 console.log는 출력하는 명령어
//console.log(a);

a = "안녕하세요 저는 한국어도 표시할줄 알아요";

a=3;
//a에 1이담김> a에 "안녕하세요 저는 한국어도 표시할줄 알아요" 담김 > 일본어가 담기고 한국어 사라짐

let b=1;
// 똑같은 이름으로 또 선언불가, 변수이름은 영어로 하는게 권장사항+첫자리에 숫자올수 없음

/*let c=a+b;
console.log(`a+b=`,c);

console.log(`${a} + ${b} = ${c}`); //백틱(`)을쓰면 줄바꿈도 가능, ${}안에 변수넣으면됨 string interpolation
*/
//변수선언시 let말고 const도 있음, const는 상수로 한번 담으면 변경불가
/*a+3;
console.log(`a:${a}`);
a=a+3;
console.log(`a:${a}`);
console.log()흑백 화면에 출력하라 console.log(``) backtick은 string interpolation
 프로그래밍에서 = 기호는 수학의 equal과 다름 프로그래밍에선 대입(save)연산자로 쓰임
/* a+3; 그냥 a에 3을 더하는 연산을 수행하고 결과를 버림
a=a+3; a에 3을 더한 결과를 다시 a에 대입(저장)함
*/
a=1;
a++;
//console.log(`a:${a}`);
// ++ --는 특수한 연산
// = 대입연산자가 없어도 값을바꿔서 저장함
const con1=3;

a = 1;
b = "2";
c = a + b;
//console.log(`a+b=${c}`);
//자바스크립트는 동적타입언어, 변수에 담기는 값에 따라 타입이 바뀜
//b가 문자열이므로 a가 숫자라도 문자열로 변환되어서 결합됨
// 숫자와 문자열을 + 연산을하면, 자바스크립트는 그냥 두개를 붙여버림

/*과제1 num1이라는 변수를 선언하고 3이라는 값으로 초기화 해주세요
num2라는 변수를 선언하고 2라는 값으로 초기화 해주세요
result라는 변수를 선어하고, num1/num2 값으로 초기화 해주세요
*/
let num1;
let num2;
num1=3;
num2=2;
let result=num1/num2;
console.log(`result:${result}`);

/* +-* /% 들이 연산자
 ++ -- 들이 특수한 연산자
 제어연산 
 논리연산
 함수() 이것들을 벗어나면 깡통이다
*/
/* 자바스크립트, 파이썬, 자바, c# 다 데이터 타입이 있어요
null== 아무값도 없다, 메모리 4비트정도 먹음, 0이랑 완전 틀림 (비어있음을 의도적으로 강조)
undefined ==null이랑 틀림, 선언은 되었지만 값이 지정되지 않음(초기화 안됨) undefined라는 타입
boolean == true/false
number == 숫자(정수, 소수점), 2의 53승까지 표현가능 (대략 9000조)
bigint == 해단위 숫자
string == 문자열

complex 자료형 (여러데이터랑 기능을 담는것들)
배열 array == []서랍
object == {} 선물 세트

인공지능 자료형
numpy == 숫자덩어리, 컴퓨터도 잘먹음
tensor == 전처리된 숫자 덩어리, 컴퓨터 매우 잘먹음

타입 없을 떄 장점: 어려운 데이터도 일단 받을수 있다, 받고나면 gpt한테 위탁이라도 하자
타입 없을 대 단점: 어려운 작업할때 에러가 나는데 왜 에러가 났는지 알기 어려움, 내가 뭐가 뭔지 확신할수 없어서 할수 있는게 제한적
그래서 타입스크립트라는 언어가 나옴, 자바스크립트에 타입을 넣어줌

타입 있을 때 단점: 어떤 타입을 정해줘야 할지 모르면 시작도 못한다.
타입 있을때 장점: 몰라도 설명서 읽고 검색하면 된다. 사용법 다 나온다.

타입이 그렇게 좋은데, 인공지능에선 왜 파이썬 쓰는가?
tensor는 진짜 뜯어보면 숫자가 다차원행렬로 30억개 이상 존재
사람은 절대 못알아들음, 타입을 지정할수도 없음.
그래서 타입을 지정안하는 파이썬을 쓰는것
일단 데이터를 만들고 받고 주고 해야되니까
*/
let array = [num1,num2, 4,5];
//array는 연속된 저장공간을 점유해서 순차적으로 데이터를 담음
console.log(`array의 첫번째 원소는:${array[0]}`);
num1++;
console.log(`array의 두번째 원소는:${array[1]}`);
console.log(`array의 99번째 원소는:${array[99]}`);
//array존재하지않는 원소는 undefined
